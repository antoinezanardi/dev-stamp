{
  "files": {
    "src/index.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "0",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected \"error\" to be called with arguments: [ Array(1) ]\u001b[90m\n\nNumber of calls: \u001b[1m0\u001b[22m\n\u001b[39m",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 101,
              "line": 5
            }
          }
        },
        {
          "id": "1",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/index.ts(20,3): error TS18047: 'targetElement' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 78,
              "line": 6
            },
            "start": {
              "column": 7,
              "line": 6
            }
          }
        },
        {
          "id": "2",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of undefined (reading 'document')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 78,
              "line": 6
            },
            "start": {
              "column": 7,
              "line": 6
            }
          }
        },
        {
          "id": "3",
          "mutatorName": "LogicalOperator",
          "replacement": "typeof window === \"undefined\" && typeof window.document === \"undefined\"",
          "statusReason": "src/index.ts(6,54): error TS2339: Property 'document' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 78,
              "line": 6
            },
            "start": {
              "column": 7,
              "line": 6
            }
          }
        },
        {
          "id": "4",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of undefined (reading 'document')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 6
            },
            "start": {
              "column": 7,
              "line": 6
            }
          }
        },
        {
          "id": "5",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof window !== \"undefined\"",
          "statusReason": "src/index.ts(6,54): error TS2339: Property 'document' does not exist on type 'never'.\nsrc/index.ts(13,32): error TS2339: Property 'document' does not exist on type 'never'.\nsrc/index.ts(19,30): error TS2339: Property 'document' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 6
            },
            "start": {
              "column": 7,
              "line": 6
            }
          }
        },
        {
          "id": "6",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/index.ts(6,7): error TS2367: This comparison appears to be unintentional because the types '\"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\"' and '\"\"' have no overlap.\nsrc/index.ts(6,45): error TS2339: Property 'document' does not exist on type 'never'.\nsrc/index.ts(13,32): error TS2339: Property 'document' does not exist on type 'never'.\nsrc/index.ts(19,30): error TS2339: Property 'document' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 6
            },
            "start": {
              "column": 25,
              "line": 6
            }
          }
        },
        {
          "id": "7",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of undefined (reading 'querySelector')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1",
            "2",
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 78,
              "line": 6
            },
            "start": {
              "column": 40,
              "line": 6
            }
          }
        },
        {
          "id": "8",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof window.document !== \"undefined\"",
          "statusReason": "src/index.ts(13,41): error TS2339: Property 'querySelector' does not exist on type 'never'.\nsrc/index.ts(19,39): error TS2339: Property 'createComment' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "1",
            "2",
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 78,
              "line": 6
            },
            "start": {
              "column": 40,
              "line": 6
            }
          }
        },
        {
          "id": "9",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/index.ts(6,40): error TS2367: This comparison appears to be unintentional because the types '\"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\"' and '\"\"' have no overlap.\nsrc/index.ts(13,41): error TS2339: Property 'querySelector' does not exist on type 'never'.\nsrc/index.ts(19,39): error TS2339: Property 'createComment' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "1",
            "2",
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 78,
              "line": 6
            },
            "start": {
              "column": 67,
              "line": 6
            }
          }
        },
        {
          "id": "10",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'document')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 10
            },
            "start": {
              "column": 80,
              "line": 6
            }
          }
        },
        {
          "id": "11",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected \"error\" to be called with arguments: [ Array(1) ]\u001b[90m\n\nReceived: \n\n\u001b[1m  1st error call:\n\n\u001b[22m\u001b[2m  [\u001b[22m\n\u001b[32m-   \"This function can only be run in a browser environment.\",\u001b[90m\n\u001b[31m+   \"\",\u001b[90m\n\u001b[2m  ]\u001b[22m\n\u001b[39m\u001b[90m\n\nNumber of calls: \u001b[1m1\u001b[22m\n\u001b[39m",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1"
          ],
          "location": {
            "end": {
              "column": 76,
              "line": 7
            },
            "start": {
              "column": 19,
              "line": 7
            }
          }
        },
        {
          "id": "12",
          "mutatorName": "BooleanLiteral",
          "replacement": "targetElement",
          "statusReason": "src/index.ts(20,3): error TS18047: 'targetElement' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "2",
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 21,
              "line": 14
            },
            "start": {
              "column": 7,
              "line": 14
            }
          }
        },
        {
          "id": "13",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/index.ts(20,3): error TS18047: 'targetElement' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "2",
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 21,
              "line": 14
            },
            "start": {
              "column": 7,
              "line": 14
            }
          }
        },
        {
          "id": "14",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/index.ts(20,3): error TS18047: 'targetElement' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "2",
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 21,
              "line": 14
            },
            "start": {
              "column": 7,
              "line": 14
            }
          }
        },
        {
          "id": "15",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/index.ts(16,3): error TS18047: 'targetElement' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "2"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 18
            },
            "start": {
              "column": 23,
              "line": 14
            }
          }
        },
        {
          "id": "16",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected \"error\" to be called with arguments: [ Array(1) ]\u001b[90m\n\nReceived: \n\n\u001b[1m  1st error call:\n\n\u001b[22m\u001b[2m  [\u001b[22m\n\u001b[32m-   \"Target element not found: #nonexistent\",\u001b[90m\n\u001b[31m+   \"\",\u001b[90m\n\u001b[2m  ]\u001b[22m\n\u001b[39m\u001b[90m\n\nNumber of calls: \u001b[1m1\u001b[22m\n\u001b[39m",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 15
            },
            "start": {
              "column": 19,
              "line": 15
            }
          }
        }
      ],
      "source": "import type { StampOptions } from \"@/index.types\";\nimport { DEFAULT_STAMP_OPTIONS } from \"@/index.constants\";\nimport { getStampOptions } from \"@/utils/utils\";\n\nfunction stampInHtml(message: string, options: Partial<StampOptions> = DEFAULT_STAMP_OPTIONS): void {\n  if (typeof window === \"undefined\" || typeof window.document === \"undefined\") {\n    console.error(\"This function can only be run in a browser environment.\");\n\n    return;\n  }\n  const mergedOptions = getStampOptions(options);\n  const { targetSelector } = mergedOptions;\n  const targetElement = window.document.querySelector(targetSelector);\n  if (!targetElement) {\n    console.error(`Target element not found: ${targetSelector}`);\n\n    return;\n  }\n  const commentNode = window.document.createComment(message);\n  targetElement.appendChild(commentNode);\n}\n\nexport {\n  stampInHtml,\n};\n\nexport type { StampOptions };"
    },
    "src/utils/utils.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "17",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/utils/utils.ts(4,59): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "2",
            "3",
            "4",
            "5",
            "6"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 9
            },
            "start": {
              "column": 72,
              "line": 4
            }
          }
        },
        {
          "id": "18",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/utils/utils.ts(5,3): error TS2741: Property 'targetSelector' is missing in type '{}' but required in type 'StampOptions'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "2",
            "3",
            "4",
            "5",
            "6"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 8
            },
            "start": {
              "column": 10,
              "line": 5
            }
          }
        }
      ],
      "source": "import { DEFAULT_STAMP_OPTIONS } from \"@/index.constants\";\nimport type { StampOptions } from \"@/index.types\";\n\nfunction getStampOptions(options: Partial<StampOptions>): StampOptions {\n  return {\n    ...DEFAULT_STAMP_OPTIONS,\n    ...options,\n  };\n}\n\nexport {\n  getStampOptions,\n};"
    }
  },
  "schemaVersion": "1.0",
  "thresholds": {
    "high": 100,
    "low": 100,
    "break": 100
  },
  "testFiles": {
    "src/index.spec.ts": {
      "tests": [
        {
          "id": "0",
          "name": "Dev Stamp Index stampInHtml should log an error when not in a browser environment because window is undefined."
        },
        {
          "id": "1",
          "name": "Dev Stamp Index stampInHtml should log an error when not in a browser environment because document is undefined."
        },
        {
          "id": "2",
          "name": "Dev Stamp Index stampInHtml should log an error when the target element is not found."
        },
        {
          "id": "3",
          "name": "Dev Stamp Index stampInHtml should append a comment node to the target element when called."
        },
        {
          "id": "4",
          "name": "Dev Stamp Index stampInHtml should append a comment node with the message specified in first argument to the target element when called."
        }
      ],
      "source": "import { Node, Window } from \"happy-dom\";\nimport { describe } from \"vitest\";\n\nimport { stampInHtml } from \"@/index\";\n\nconst window = new Window({ url: \"https://localhost:8080\" });\nconst document = window.document;\n\ndescribe(\"Dev Stamp Index\", () => {\n  describe(stampInHtml, () => {\n    beforeEach(() => {\n      globalThis.window = window as unknown as typeof globalThis.window;\n      globalThis.document = document as unknown as Document;\n      window.document.body.innerHTML = \"<body><h1>Title</h1><p>Text</p></body>\";\n    });\n\n    it(\"should log an error when not in a browser environment because window is undefined.\", () => {\n      globalThis.window = undefined as unknown as typeof globalThis.window;\n      const consoleErrorSpy = vi.spyOn(console, \"error\").mockImplementation(vi.fn());\n      stampInHtml(\"Test message\");\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\"This function can only be run in a browser environment.\");\n    });\n\n    it(\"should log an error when not in a browser environment because document is undefined.\", () => {\n      globalThis.window = {} as unknown as typeof globalThis.window;\n      const consoleErrorSpy = vi.spyOn(console, \"error\").mockImplementation(vi.fn());\n      stampInHtml(\"Test message\");\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\"This function can only be run in a browser environment.\");\n    });\n\n    it(\"should log an error when the target element is not found.\", () => {\n      const consoleErrorSpy = vi.spyOn(console, \"error\").mockImplementation(vi.fn());\n      stampInHtml(\"Test message\", { targetSelector: \"#nonexistent\" });\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\"Target element not found: #nonexistent\");\n    });\n\n    it(\"should append a comment node to the target element when called.\", () => {\n      const message = \"Hello Dark Jess' 🪄\";\n      stampInHtml(message);\n      const targetElement = window.document.querySelector(\"body\");\n      const appendedNode = targetElement?.lastChild;\n\n      expect(appendedNode?.nodeType).toBe(Node.COMMENT_NODE);\n    });\n\n    it(\"should append a comment node with the message specified in first argument to the target element when called.\", () => {\n      const message = \"Hello Dark Jess' 🪄\";\n      stampInHtml(message);\n      const targetElement = window.document.querySelector(\"body\");\n      const appendedNode = targetElement?.lastChild;\n\n      expect(appendedNode?.nodeValue).toBe(message);\n    });\n  });\n});"
    },
    "src/utils/utils.spec.ts": {
      "tests": [
        {
          "id": "5",
          "name": "Dev Stamp Utils getStampOptions should return default options when no options are provided."
        },
        {
          "id": "6",
          "name": "Dev Stamp Utils getStampOptions should override default options with provided options when called."
        }
      ],
      "source": "import { describe } from \"vitest\";\n\nimport { DEFAULT_STAMP_OPTIONS } from \"@/index.constants\";\nimport { getStampOptions } from \"@/utils/utils\";\n\ndescribe(\"Dev Stamp Utils\", () => {\n  describe(getStampOptions, () => {\n    it(\"should return default options when no options are provided.\", () => {\n      const result = getStampOptions({});\n\n      expect(result).toStrictEqual(DEFAULT_STAMP_OPTIONS);\n    });\n\n    it(\"should override default options with provided options when called.\", () => {\n      const customOptions = { targetSelector: \"#custom\" };\n      const result = getStampOptions(customOptions);\n\n      expect(result).toStrictEqual({ ...DEFAULT_STAMP_OPTIONS, ...customOptions });\n    });\n  });\n});"
    }
  },
  "projectRoot": "/Users/mac-Z14AZANA/WebstormProjects/dev-stamp",
  "config": {
    "cleanTempDir": "always",
    "incremental": true,
    "incrementalFile": "tests/stryker/incremental/incremental.json",
    "checkers": [
      "typescript"
    ],
    "tsconfigFile": "tsconfig.json",
    "testRunner": "vitest",
    "ignoreStatic": true,
    "plugins": [
      "@stryker-mutator/vitest-runner",
      "@stryker-mutator/typescript-checker"
    ],
    "ignorePatterns": [
      ".github/",
      ".husky/",
      ".run/",
      ".idea/",
      "dist/",
      "config/commitlint",
      "config/cucumber",
      "config/eslint",
      "config/lint-staged",
      "config/stryker",
      "tests/stryker",
      "tests/unit/coverage",
      "scripts/",
      "server/",
      ".editorconfig",
      ".npmrc",
      ".nvmrc",
      "release.config.mjs",
      ".DS_Store",
      ".validate-branch-namerc.json",
      "CHANGELOG.md",
      "LICENSE",
      "pnpm-lock.yaml",
      "sonar-project.properties",
      "README.md",
      "eslint.config.ts"
    ],
    "vitest": {
      "configFile": "config/vitest/vitest.global-unit-tests-config.ts"
    },
    "reporters": [
      "clear-text",
      "progress",
      "html",
      "json"
    ],
    "htmlReporter": {
      "fileName": "tests/stryker/coverage/index.html"
    },
    "jsonReporter": {
      "fileName": "tests/stryker/coverage/mutation.json"
    },
    "thresholds": {
      "high": 100,
      "low": 100,
      "break": 100
    },
    "dryRunTimeoutMinutes": 10,
    "disableTypeChecks": true,
    "packageManager": "pnpm",
    "configFile": "config/stryker/stryker.conf.mjs",
    "allowConsoleColors": true,
    "checkerNodeArgs": [],
    "commandRunner": {
      "command": "npm test"
    },
    "coverageAnalysis": "perTest",
    "clearTextReporter": {
      "allowColor": true,
      "allowEmojis": false,
      "logTests": true,
      "maxTestsToLog": 3,
      "reportTests": true,
      "reportMutants": true,
      "reportScoreTable": true,
      "skipFull": false
    },
    "dashboard": {
      "baseUrl": "https://dashboard.stryker-mutator.io/api/reports",
      "reportType": "full"
    },
    "dryRunOnly": false,
    "eventReporter": {
      "baseDir": "reports/mutation/events"
    },
    "force": false,
    "fileLogLevel": "off",
    "inPlace": false,
    "logLevel": "info",
    "maxConcurrentTestRunners": 9007199254740991,
    "maxTestRunnerReuse": 0,
    "mutate": [
      "{src,lib}/**/!(*.+(s|S)pec|*.+(t|T)est).+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)",
      "!{src,lib}/**/__tests__/**/*.+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)"
    ],
    "mutator": {
      "plugins": null,
      "excludedMutations": []
    },
    "appendPlugins": [],
    "symlinkNodeModules": true,
    "tempDirName": ".stryker-tmp",
    "testRunnerNodeArgs": [],
    "timeoutFactor": 1.5,
    "timeoutMS": 5000,
    "warnings": true,
    "disableBail": false,
    "allowEmpty": false,
    "ignorers": [],
    "typescriptChecker": {
      "prioritizePerformanceOverAccuracy": true
    }
  },
  "framework": {
    "name": "StrykerJS",
    "version": "9.0.1",
    "branding": {
      "homepageUrl": "https://stryker-mutator.io",
      "imageUrl": "data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"
    },
    "dependencies": {
      "@stryker-mutator/typescript-checker": "9.0.1",
      "typescript": "5.8.3"
    }
  }
}